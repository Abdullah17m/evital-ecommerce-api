export const addProductCart = async (cart: AddtoCartItems) => {
    try {
        const { user_id, cart_id, product_id, quantity } = cart;

        const productStock = await pool.query(
            `SELECT stock, price FROM products WHERE product_id = $1`,
            [product_id]
        );

        if (productStock.rowCount === 0) {
            return { error: true, message: "Product not found.", data: {} };
        }

        const { stock, price } = productStock.rows[0];

        if (stock < quantity) {
            return { error: true, message: "Not enough stock available.", data: {} };
        }

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        const { total_amount } = cartData.rows[0];
        const updatedAmount = Number(total_amount) + (Number(price) * quantity);

        await pool.query(
            `INSERT INTO cartitems (cart_id, product_id, quantity) VALUES ($1, $2, $3)`,
            [cart_id, product_id, quantity]
        );

        await pool.query(
            `UPDATE carts SET total_amount = $1 WHERE cart_id = $2`,
            [updatedAmount, cart_id]
        );

        return { message: "Product added to cart successfully", data: { updatedAmount } };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

// Similar changes will apply to other functions like updateCart, deleteProductCart, etc.

export const updateCart = async (cart: UpdateCartItems) => {
    try {
        const { user_id, cart_id, product_id, quantity } = cart;

        const productStock = await pool.query(
            `SELECT stock, price FROM products WHERE product_id = $1`,
            [product_id]
        );

        if (productStock.rowCount === 0) {
            return { error: true, message: "Product not found.", data: {} };
        }

        const { stock, price } = productStock.rows[0];

        if (stock < quantity) {
            return { error: true, message: "Not enough stock available.", data: {} };
        }

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        const { total_amount } = cartData.rows[0];
        const updatedAmount = Number(total_amount) + (Number(price) * quantity);

        await pool.query(
            `UPDATE cartitems SET quantity = $1 WHERE cart_id = $2 AND product_id = $3`,
            [quantity, cart_id, product_id]
        );

        await pool.query(
            `UPDATE carts SET total_amount = $1 WHERE cart_id = $2`,
            [updatedAmount, cart_id]
        );

        return { message: "Cart updated successfully", data: { updatedAmount } };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

export const deleteProductCart = async (cart: DeleteCartItem) => {
    try {
        const { user_id, cart_id, product_id } = cart;

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        const { total_amount } = cartData.rows[0];

        const productData = await pool.query(
            `SELECT price, quantity FROM cartitems WHERE cart_id = $1 AND product_id = $2`,
            [cart_id, product_id]
        );

        if (productData.rowCount === 0) {
            return { error: true, message: "Product not found in the cart.", data: {} };
        }

        const { price, quantity } = productData.rows[0];
        const updatedAmount = Number(total_amount) - (Number(price) * quantity);

        await pool.query(
            `DELETE FROM cartitems WHERE cart_id = $1 AND product_id = $2`,
            [cart_id, product_id]
        );

        await pool.query(
            `UPDATE carts SET total_amount = $1 WHERE cart_id = $2`,
            [updatedAmount, cart_id]
        );

        return { message: "Product removed from cart successfully", data: { updatedAmount } };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

export const deleteCart = async (cart: DeleteCart) => {
    try {
        const { user_id, cart_id } = cart;

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        await pool.query(
            `DELETE FROM cartitems WHERE cart_id = $1`,
            [cart_id]
        );

        await pool.query(
            `DELETE FROM carts WHERE cart_id = $1 AND user_id = $2`,
            [cart_id, user_id]
        );

        return { message: "Cart cleared successfully", data: {} };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

export const getCartItemsById = async (cart_id: number, user_id: number) => {
    try {
        const cartData = await pool.query(
            `SELECT * FROM cartitems WHERE cart_id = $1`,
            [cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "No items found in the cart.", data: {} };
        }

        const cartItems = cartData.rows;

        return { message: "Cart items fetched successfully", data: { cartItems } };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};



import pool from "../config/database";

export const createCategory = async (name: string) => {
    try {
        const result = await pool.query(
            "INSERT INTO productcategories (name) VALUES ($1) RETURNING *",
            [name]
        );
        return result.rows[0];
    } catch (error) {
        console.error("Error creating category:", error);
        throw new Error("Could not create category");
    }
};

export const getAllCategories = async () => {
    try {
        const result = await pool.query("SELECT * FROM productcategories ORDER BY name ASC");
        return result.rows;
    } catch (error) {
        console.error("Error fetching categories:", error);
        throw new Error("Could not fetch categories");
    }
};

export const getCategoryById = async (category_id: number) => {
    try {
        const result = await pool.query("SELECT * FROM productcategories WHERE category_id = $1", [category_id]);
        return result.rows[0] || null;
    } catch (error) {
        console.error("Error fetching category:", error);
        throw new Error("Could not fetch category");
    }
};

export const updateCategory = async (category_id: number, name: string) => {
    try {
        const result = await pool.query(
            "UPDATE productcategories SET name = $2 WHERE category_id = $1 RETURNING *",
            [category_id, name]
        );
        return result.rows[0] || null;
    } catch (error) {
        console.error("Error updating category:", error);
        throw new Error("Could not update category");
    }
};

export const deleteCategory = async (category_id: number) => {
    try {
        const result = await pool.query(
            "DELETE FROM productcategories WHERE category_id = $1 RETURNING *",
            [category_id]
        );
        return result.rows[0] || null;
    } catch (error) {
        console.error("Error deleting category:", error);
        throw new Error("Could not delete category");
    }
};


import pool from "../config/database";

interface AddtoCartItems {
    cart_id:number;
    user_id: number;
    product_id:number;
    quantity:number;
}
export const getAllCarts = async (userId: Number) => {

    try {
        
        const result = await pool.query(
            `select cart_id,total_amount from carts where user_id=$1`,[userId]
        );
        return result.rows;
    } catch (error) {
        console.log(error);
        throw new Error("Error fetching carts");
    }
};


export const createCart = async (userId: Number) => {

    try {
        
        const result = await pool.query(
            `insert into carts (user_id) values ($1) RETURNING *`,[userId]
        );
        return result.rows;
    } catch (error) {
        console.log(error);
        throw new Error("Error fetching carts");
    }
};


export const addProductCart = async (cart: AddtoCartItems) => {
    try {
        const { user_id, cart_id, product_id, quantity } = cart;

        const productStock = await pool.query(
            `SELECT stock, price FROM products WHERE product_id = $1`,
            [product_id]
        );

        if (productStock.rowCount === 0) {
            return { error: true, message: "Product not found.", data: {} };
        }

        const { stock, price } = productStock.rows[0];

        if (stock < quantity) {
            return { error: true, message: "Not enough stock available.", data: {} };
        }

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        const { total_amount } = cartData.rows[0];
        const updatedAmount = Number(total_amount) + (Number(price) * quantity);

        await pool.query(
            `INSERT INTO cartitems (cart_id, product_id, quantity) VALUES ($1, $2, $3)`,
            [cart_id, product_id, quantity]
        );

        await pool.query(
            `UPDATE carts SET total_amount = $1 WHERE cart_id = $2`,
            [updatedAmount, cart_id]
        );

        return { message: "Product added to cart successfully", data: { updatedAmount } };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

// Similar changes will apply to other functions like updateCart, deleteProductCart, etc.

export const updateCart = async (cart: AddtoCartItems) => {
    try {
        const { user_id, cart_id, product_id, quantity } = cart;
       
        const productStock = await pool.query(
            `SELECT stock, price FROM products WHERE product_id = $1`,
            [product_id]
        );

        if (productStock.rowCount === 0) {
            return { error: true, message: "Product not found.", data: {} };
        }

        const { stock, price } = productStock.rows[0];

        if (stock < quantity) {
            return { error: true, message: "Not enough stock available.", data: {} };
        }

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        // const { total_amount } = cartData.rows[0];
        // const updatedAmount = Number(total_amount) + (Number(price) * quantity);
        

        await pool.query(
            `UPDATE cartitems SET quantity = $1 WHERE cart_id = $2 AND product_id = $3`,
            [quantity, cart_id, product_id]
        );
        const totalAmountResult = await pool.query(
            `SELECT COALESCE(SUM(ci.quantity * p.price), 0) AS total_amount
             FROM cartitems ci
             JOIN products p ON ci.product_id = p.product_id
             WHERE ci.cart_id = $1`,
            [cart_id]
        );
        

        const updatedAmount = Number(totalAmountResult.rows[0].total_amount);
        
        await pool.query(
            `UPDATE carts SET total_amount = $1 WHERE cart_id = $2`,
            [updatedAmount, cart_id]
        );

        return {error: true, message: "Cart updated successfully", data: { updatedAmount } };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

export const deleteProductCart = async (cart: AddtoCartItems) => {
    try {
        const { user_id, cart_id, product_id } = cart;

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        const { total_amount } = cartData.rows[0];

        const productData = await pool.query(
            `SELECT p.price, ci.quantity 
            FROM cartitems ci 
            JOIN products p ON p.product_id = ci.product_id  
            WHERE ci.cart_id = $1 AND ci.product_id = $2;`,
            [cart_id, product_id]
        );

        if (productData.rowCount === 0) {
            return { error: true, message: "Product not found in the cart.", data: {} };
        }

        const { price, quantity } = productData.rows[0];
        const updatedAmount = Number(total_amount) - (Number(price) * quantity);

        await pool.query(
            `DELETE FROM cartitems WHERE cart_id = $1 AND product_id = $2`,
            [cart_id, product_id]
        );

        await pool.query(
            `UPDATE carts SET total_amount = $1 WHERE cart_id = $2`,
            [updatedAmount, cart_id]
        );

        return { message: "Product removed from cart successfully", data: { updatedAmount } };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

export const deleteCart = async (cart: AddtoCartItems) => {
    try {
        const { user_id, cart_id } = cart;

        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE user_id = $1 AND cart_id = $2`,
            [user_id, cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        await pool.query(
            `DELETE FROM cartitems WHERE cart_id = $1`,
            [cart_id]
        );

        await pool.query(
            `DELETE FROM carts WHERE cart_id = $1 AND user_id = $2`,
            [cart_id, user_id]
        );

        return { message: "Cart cleared successfully", data: {} };
    } catch (error:any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};

export const getCartItemsById = async (cart_id: number, user_id: number) => {
    try {
        // Check if the cart exists for the user
        const cartExists = await pool.query(
            `SELECT * FROM carts WHERE cart_id = $1 AND user_id = $2`,
            [cart_id, user_id]
        );

        if (cartExists.rowCount === 0) {
            return { error: true, message: "Cart not found for this user.", data: {} };
        }

        // Fetch cart items
        const cartData = await pool.query(
            `SELECT * FROM cartitems WHERE cart_id = $1`,
            [cart_id]
        );

        if (cartData.rowCount === 0) {
            return { error: true, message: "No items found in the cart.", data: {} };
        }

        const cartItems = cartData.rows;

        return { message: "Cart items fetched successfully", data: { cartItems } };
    } catch (error: any) {
        console.log(error);
        return { error: true, message: error.message || "Internal Server Error", data: {} };
    }
};


// export const addProductCart = async (cart:AddtoCartItems) => {

//     try {
//         const {user_id,cart_id,product_id,quantity} = cart;
//         // const checkCartExists = await pool.query(`select cart_id from carts where user_id=$1 and cart_id=$2`,[user_id,cart_id])
//         // if(checkCartExists.rowCount == 0){
//         //     throw new Error("Cart not found for this user.");
//         // }
//         const cartData = await pool.query(
//             `SELECT c.total_amount, p.price 
//              FROM carts c 
//              JOIN products p ON p.product_id = $1 
//              WHERE c.user_id = $2 AND c.cart_id = $3`,
//             [product_id, user_id, cart_id]
//         );

//         if (cartData.rowCount === 0) {
//             throw new Error("Cart not found for this user.");
//         }
//         const { total_amount, price } = cartData.rows[0];
//         const updatedAmount = Number(total_amount) + Number(price) * quantity;
//         const result = await pool.query(
//             `insert into cartitems (cart_id,product_id,quantity) values ($1,$2,$3)`,[cart_id,product_id,quantity]
//         );
//         // const totalAmt = await pool.query(`select total_amount from carts where cart_id=$1`,[cart_id]);
//         // const amount = Number(totalAmt.rows[0].total_amount);
//         // const productPrice = await pool.query(`select price from products where product_id=$1`,[product_id]);
//         // const price = Number(productPrice.rows[0].price);
//         // console.log(price);
//         // let updatedAmount = amount;
//         // updatedAmount += (price * quantity);

//         const updateCart = await pool.query(`Update carts set total_amount=$1 where cart_id=$2`,[updatedAmount,cart_id]);
//          return result.rows[0];
//     } catch (error) {
//         console.log(error);
//         throw new Error("Error adding in  cart");
//     }
// };



// export const updateCart = async (cart:AddtoCartItems) => {

//     try {
//         const { cart_id, user_id,product_id,quantity} = cart;
//         const cartData = await pool.query(
//             `SELECT ci.quantity, p.price, c.total_amount
//              FROM cartitems ci
//              JOIN products p ON ci.product_id = p.product_id
//              JOIN carts c ON ci.cart_id = c.cart_id
//              WHERE ci.cart_id = $1 AND ci.product_id = $2 AND c.user_id = $3`,
//             [cart_id, product_id, user_id]
//         );
//         if (cartData.rowCount === 0) {
//             throw new Error("Cart not found for this user.");
//         }
//         if(quantity <= 0){
            
//         }
//         const result = await pool.query(
//             `UPDATE cartitems SET quantity = $1 WHERE cart_id = $2 AND product_id = $3 returning *`,
//             [quantity, cart_id, product_id]
//         );
//         const totalAmountResult = await pool.query(
//             `SELECT SUM(ci.quantity * p.price) AS total_amount
//              FROM cartitems ci
//              JOIN products p ON ci.product_id = p.product_id
//              WHERE ci.cart_id = $1`,
//             [cart_id]
//         );

//         const updatedAmount = Number(totalAmountResult.rows[0].total_amount);
//         await pool.query(
//             `UPDATE carts SET total_amount = $1 WHERE cart_id = $2`,
//             [updatedAmount, cart_id]
//         );
       

//         return result.rows[0];
//     } catch (error) {
//         console.log(error);
//         throw new Error("Error fetching carts");
//     }
// };


import pool from "../config/database";

interface Discount {
    discount_id?: number;
    code: string;
    discount_percentage: number;
    expiration_date: string;
    created_at?: string;
}

// Create a Discount
export const createDiscount = async (discount: Discount) => {
    try {
        const { code, discount_percentage, expiration_date } = discount;
        const result = await pool.query(
            `INSERT INTO discounts (code, discount_percentage, expiration_date, created_at)
             VALUES ($1, $2, $3, NOW()) RETURNING *`,
            [code, discount_percentage, expiration_date]
        );
        return result.rows[0];
    } catch (error) {
        console.error("Error creating discount:", error);
        throw new Error("Error creating discount");
    }
};

// Get All Discounts
export const getAllDiscounts = async () => {
    try {
        const result = await pool.query(`SELECT * FROM discounts`);
        return result.rows;
    } catch (error) {
        console.error("Error fetching discounts:", error);
        throw new Error("Error fetching discounts");
    }
};

// Get Discount by ID
export const getDiscountById = async (discount_id: number) => {
    try {
        const result = await pool.query(`SELECT * FROM discounts WHERE discount_id = $1`, [discount_id]);
        if (result.rowCount === 0) return null;
        return result.rows[0];
    } catch (error) {
        console.error("Error fetching discount:", error);
        throw new Error("Error fetching discount");
    }
};

// Update Discount
export const updateDiscount = async (discount_id: number, discount: Partial<Discount>) => {
    try {
        const { code, discount_percentage, expiration_date } = discount;
        const result = await pool.query(
            `UPDATE discounts 
             SET code = COALESCE($1, code), 
                 discount_percentage = COALESCE($2, discount_percentage),
                 expiration_date = COALESCE($3, expiration_date)
             WHERE discount_id = $4 RETURNING *`,
            [code, discount_percentage, expiration_date, discount_id]
        );

        if (result.rowCount === 0) return null;
        return result.rows[0];
    } catch (error) {
        console.error("Error updating discount:", error);
        throw new Error("Error updating discount");
    }
};

// Delete Discount
export const deleteDiscount = async (discount_id: number) => {
    try {
        const result = await pool.query(`DELETE FROM discounts WHERE discount_id = $1 RETURNING *`, [discount_id]);
        if (result.rowCount === 0) return null;
        return result.rows[0];
    } catch (error) {
        console.error("Error deleting discount:", error);
        throw new Error("Error deleting discount");
    }
};



import pool from "../config/database";

export interface Feedback {
    feedback_id?: number;
    user_id: number;
    product_id: number;
    rating: number;
    comment: string;
    created_at?: Date;
}

// Helper function to update average rating in products table
const updateProductRating = async (product_id: number) => {
    const ratingResult = await pool.query(
        `SELECT COALESCE(AVG(rating), 0) AS avg_rating FROM feedbacks WHERE product_id = $1`,
        [product_id]
    );

    const avg_rating = Number(ratingResult.rows[0].avg_rating).toFixed(2); // Ensure it's a number before formatting

    await pool.query(
        `UPDATE products SET average_rating = $1 WHERE product_id = $2`,
        [avg_rating, product_id]
    );
};


// Add Feedback
export const addFeedback = async (feedback: Feedback) => {
    const { user_id, product_id, rating, comment } = feedback;

    // Check if user has ordered the product
    const orderCheck = await pool.query(
        `SELECT oi.order_id 
         FROM ordereditems oi
         JOIN orders o ON oi.order_id = o.order_id
         WHERE oi.product_id = $1 AND o.user_id = $2 AND o.status=$3`,
        [product_id, user_id,"Delivered"]
    );

    if (orderCheck.rowCount === 0) {
        throw new Error("You can only leave feedback for products you have purchased.");
    }

    // Insert Feedback
    const result = await pool.query(
        `INSERT INTO feedbacks (user_id, product_id, rating, comment, created_at)
         VALUES ($1, $2, $3, $4, NOW()) RETURNING *`,
        [user_id, product_id, rating, comment]
    );

    await updateProductRating(product_id); // Update average rating

    return result.rows[0];
};


// Get All Feedbacks
export const getAllFeedbacks = async () => {
    const result = await pool.query(`SELECT * FROM feedbacks ORDER BY created_at DESC`);
    return result.rows;
};

// Get Feedback for Specific Product
export const getProductFeedback = async (product_id: number) => {
    const result = await pool.query(
        `SELECT * FROM feedbacks WHERE product_id = $1 ORDER BY created_at DESC`,
        [product_id]
    );
    return result.rows;
};

// Update Feedback (Only Author)
export const updateFeedback = async (feedback_id: number, user_id: number, rating: number, comment: string) => {
    // Check if user owns the feedback
    const feedbackCheck = await pool.query(
        `SELECT * FROM feedbacks WHERE feedback_id = $1 AND user_id = $2`,
        [feedback_id, user_id]
    );
    console.log(feedback_id,user_id)
    if (feedbackCheck.rowCount === 0) {
        throw new Error("Unauthorized: You can only update your own feedback");
    }

    // Update feedback
    const result = await pool.query(
        `UPDATE feedbacks 
         SET rating = COALESCE($1, rating), comment = COALESCE($2, comment) 
         WHERE feedback_id = $3 
         RETURNING *`,
        [rating, comment, feedback_id]
    );

    await updateProductRating(feedbackCheck.rows[0].product_id); // Update average rating

    return result.rows[0];
};

// Delete Feedback (Only Author)
export const deleteFeedback = async (feedback_id: number, user_id: number) => {
    // Check if user owns the feedback
    const feedbackCheck = await pool.query(
        `SELECT * FROM feedbacks WHERE feedback_id = $1 AND user_id = $2`,
        [feedback_id, user_id]
    );
    if (feedbackCheck.rowCount === 0) {
        throw new Error("Unauthorized: You can only delete your own feedback");
    }

    const product_id = feedbackCheck.rows[0].product_id;

    // Delete feedback
    await pool.query(`DELETE FROM feedbacks WHERE feedback_id = $1`, [feedback_id]);

    await updateProductRating(product_id); // Update average rating

    return { message: "Feedback deleted successfully" };
};



import { Request, Response } from "express";
import {
    addFeedback,
    getAllFeedbacks,
    getProductFeedback,
    updateFeedback,
    deleteFeedback
} from "../models/feedbackModel";
import { AuthenticatedRequest } from "../types/express";

// Add Feedback
export const addFeedbackController = async (req: AuthenticatedRequest, res: Response) => {
    try {
        const user_id = req.user?.userId; // Extract user ID from authenticated request
        
        req.body.user_id = user_id;
        
        const newFeedback = await addFeedback( req.body );
        res.status(201).json({ message: "Feedback added successfully", feedback: newFeedback });
    } catch (error) {
        console.error("Error adding feedback:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};

// Get All Feedbacks
export const getAllFeedbacksController = async (req: Request, res: Response) => {
    try {
        const feedbacks = await getAllFeedbacks();
        res.status(200).json(feedbacks);
    } catch (error) {
        console.error("Error fetching feedbacks:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};

// Get Feedback for Specific Product
export const getProductFeedbackController = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const feedbacks = await getProductFeedback(Number(id));
        res.status(200).json(feedbacks);
    } catch (error) {
        console.error("Error fetching product feedback:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};

// Update Feedback (Only Author)
export const updateFeedbackController = async (req: AuthenticatedRequest, res: Response) => {
    try {
        const user_id = req.user?.userId; // Extract user ID
        
        const { feedback_id,rating, comment } = req.body;

        const updatedFeedback = await updateFeedback(feedback_id, user_id, rating, comment);
        res.status(200).json({ message: "Feedback updated successfully", feedback: updatedFeedback });
    } catch (error) {
        console.error("Error updating feedback:", error);
        res.status(403).json({ error: error });
    }
};

// Delete Feedback (Only Author)
export const deleteFeedbackController = async (req: AuthenticatedRequest, res: Response) => {
    try {
        const user_id = req.user?.userId; // Extract user ID
        const { feedback_id } = req.body;

        const message = await deleteFeedback(feedback_id, user_id);
        res.status(200).json(message);
    } catch (error) {
        console.error("Error deleting feedback:", error);
        res.status(403).json({ error: error });
    }
};

// export const createUserOrder = async (userId: Number,cart_id:Number) => {

//     try {
        
//         const result = await pool.query(
//             `select p.name,oi.order_id,oi.price,oi.quantity,o.total_amount,o.discount_amount,o.net_amount
//             from ordereditems oi
//             join products p on oi.product_id=p.product_id
//             join orders o on o.order_id=oi.order_id
//             where o.user_id=$1`,[userId]
//         );
//         return result.rows;
//     } catch (error) {
//         console.log(error);
//         throw new Error("Error fetching carts");
//     }
// };

// export const createUserOrder = async (order: Order) => {
//     try {
//         await pool.query("BEGIN"); // Start Transaction

//         const { user_id, cart_id, address_id, discount_id, payment_method, transaction_id, discount_amount } = order;

//         // If no discount, set net_amount = total_amount
        

//         // Step 1: Verify Cart Belongs to User
//         const cartData = await pool.query(
//             `SELECT total_amount FROM carts WHERE cart_id = $1 AND user_id = $2 FOR UPDATE`, 
//             [cart_id, user_id]
//         );
//         if (cartData.rowCount === 0) {
//             throw new Error("Cart not found or does not belong to this user.");
//         }
//         const total_amount = Number(cartData.rows[0].total_amount);
//         const net_amount = discount_id ? total_amount - (discount_amount || 0) : total_amount;
//         // Step 2: Create Order
//         const orderResult = await pool.query(
//             `INSERT INTO orders (user_id, address_id, discount_id, total_amount, status, payment_status, payment_method, transaction_id, created_at, discount_amount, net_amount)
//              VALUES ($1, $2, $3, $4, 'Pending', 'Unpaid', $5, $6, NOW(), $7, $8) RETURNING *`,
//             [user_id, address_id, discount_id, total_amount, payment_method, transaction_id, discount_amount, net_amount]
//         );
//         const orderId = orderResult.rows[0].order_id;

//         // Step 3: Get Cart Items from Cart
//         const cartItemsResult = await pool.query(
//             `SELECT ci.product_id, ci.quantity, p.price
//              FROM cartitems ci
//              JOIN products p ON ci.product_id = p.product_id
//              WHERE ci.cart_id = $1`, 
//             [cart_id]
//         );

//         if (cartItemsResult.rowCount === 0) {
//             throw new Error("No items found in the cart.");
//         }

//         // Step 4: Process Cart Items, Update Stock, and Add to Ordered Items
//         for (let item of cartItemsResult.rows) {
//             const { product_id, quantity, price } = item;

//             // Check the stock for each product in the cart
//             const productData = await pool.query(
//                 `SELECT stock FROM products WHERE product_id = $1 FOR UPDATE`, 
//                 [product_id]
//             );
//             const stock = productData.rows[0].stock;
//             if (stock < quantity) {
//                 throw new Error(`Not enough stock for product ${product_id}`);
//             }

//             // Update the stock in the products table
//             await pool.query(
//                 `UPDATE products SET stock = stock - $1 WHERE product_id = $2`,
//                 [quantity, product_id]
//             );

//             // Insert the ordered items into the ordereditems table
//             await pool.query(
//                 `INSERT INTO ordereditems (order_id, product_id, quantity, price)
//                  VALUES ($1, $2, $3, $4)`,
//                 [orderId, product_id, quantity, price]
//             );
//         }

//         // Step 5: Clear the Cart
//         await pool.query(`DELETE FROM cartitems WHERE cart_id = $1`, [cart_id]);
//         await pool.query(`UPDATE carts SET total_amount = 0 WHERE cart_id = $1`, [cart_id]);

//         await pool.query("COMMIT"); // Commit Transaction

//         return {
//             message: "Order created and stock updated successfully.",
//             order: orderResult.rows[0]
//         };
//     } catch (error) {
//         await pool.query("ROLLBACK"); // Rollback Transaction if Error Occurs
//         console.error("Error creating order:", error);
//         throw new Error("Error creating order.");
//     }
// };


import pool from "../config/database";
interface Order {
    order_id: number;
    user_id: number;
    address_id: number;
    cart_id:number;
    discount_id: number | null;
    total_amount: number;
    status: string;
    payment_status: string;
    payment_method: string;
    transaction_id: string | null;
    created_at: Date;
    discount_amount: number;
    net_amount: number;
}




export const getAllUserOrders = async (userId: Number) => {

    try {
        
        const result = await pool.query(
            `select order_id,net_amount from orders
            where user_id=$1`,[userId]
        );
        return result.rows;
    } catch (error) {
        console.log(error);
        throw new Error("Error fetching orders");
    }
};

export const getOrdersById = async (userId: Number,order_id: Number) => {

    try {
        
        const result = await pool.query(
            `select p.name,oi.order_id,oi.price,oi.quantity,o.total_amount,o.discount_amount,o.net_amount,o.status
            from ordereditems oi
            join products p on oi.product_id=p.product_id
            join orders o on o.order_id=oi.order_id
            where o.user_id=$1 and o.order_id=$2`,[userId,order_id]
        );
        return result.rows;
    } catch (error) {
        console.log(error);
        throw new Error("Error fetching orders");
    }
};
export const getAllOrders = async () => {

    try {
        
        const result = await pool.query(
            `select * from orders`
        );
        return result.rows;
    } catch (error) {
        console.log(error);
        throw new Error("Error fetching orders");
    }
};


export const updateOrderStatus = async (order : Order) => {

    try {
        const  { order_id,status } = order
        const result = await pool.query(
            `update orders set status=$1 where order_id=$2 returning *`,[status,order_id]
        );
        if (result.rowCount === 0) {
            throw new Error("Order not found or no changes made.");
        }
        return result.rows;
    } catch (error) {
        console.log(error);
        throw new Error("Error updating orders");
    }
};


export const cancelOrder = async (userId: Number,order_id: Number) => {

    try {
       
        const result = await pool.query(
            `update orders set status=$1 where order_id=$2 and user_id=$3 returning *`,["cancelled",order_id,userId]
        );
        if (result.rowCount === 0) {
            throw new Error("Order not found or no changes made.");
        }
        return result.rows;
    } catch (error) {
        console.log(error);
        throw new Error("Error updating orders");
    }
};


export const createUserOrder = async (order: Order) => {
    try {
        await pool.query("BEGIN"); // Start Transaction

        const { user_id, cart_id, address_id, discount_id, payment_method,payment_status, transaction_id } = order;

        // Step 1: Verify Cart Belongs to User
        const cartData = await pool.query(
            `SELECT total_amount FROM carts WHERE cart_id = $1 AND user_id = $2 FOR UPDATE`, 
            [cart_id, user_id]
        );
        if (cartData.rowCount === 0) {
            throw new Error("Cart not found or does not belong to this user.");
        }
        const total_amount = Number(cartData.rows[0].total_amount);

        // Step 2: Calculate Discount Amount
        let discount_amount = 0;
        if (discount_id) {
            const discountData = await pool.query(
                `SELECT discount_percentage FROM discounts WHERE discount_id = $1 AND expiration_date >= NOW()`, 
                [discount_id]
            );
            if (discountData.rows.length > 0) {
                const discount_percentage = Number(discountData.rows[0].discount_percentage);
                discount_amount = (discount_percentage / 100) * total_amount;
            } else {
                throw new Error("Invalid or expired discount.");
            }
        }

        // Step 3: Calculate Net Amount
        const net_amount = total_amount - discount_amount;

        // Step 4: Create Order
        const orderResult = await pool.query(
            `INSERT INTO orders (user_id, address_id, discount_id, total_amount, status, payment_status, payment_method, transaction_id, created_at, discount_amount, net_amount)
             VALUES ($1, $2, $3, $4, 'Pending', $9, $5, $6, NOW(), $7, $8) RETURNING *`,
            [user_id, address_id, discount_id, total_amount, payment_method, transaction_id, discount_amount, net_amount,payment_status]
        );
        const orderId = orderResult.rows[0].order_id;

        // Step 5: Get Cart Items from Cart
        const cartItemsResult = await pool.query(
            `SELECT ci.product_id, ci.quantity, p.price
             FROM cartitems ci
             JOIN products p ON ci.product_id = p.product_id
             WHERE ci.cart_id = $1`, 
            [cart_id]
        );

        if (cartItemsResult.rowCount === 0) {
            throw new Error("No items found in the cart.");
        }

        // Step 6: Process Cart Items, Update Stock, and Add to Ordered Items
        for (let item of cartItemsResult.rows) {
            const { product_id, quantity, price } = item;

            // Check stock before processing
            const productData = await pool.query(
                `SELECT stock FROM products WHERE product_id = $1 FOR UPDATE`, 
                [product_id]
            );
            const stock = productData.rows[0].stock;
            if (stock < quantity) {
                throw new Error(`Not enough stock for product ${product_id}`);
            }

            // Update stock in the products table
            await pool.query(
                `UPDATE products SET stock = stock - $1 WHERE product_id = $2`,
                [quantity, product_id]
            );

            // Insert into ordered items
            await pool.query(
                `INSERT INTO ordereditems (order_id, product_id, quantity, price)
                 VALUES ($1, $2, $3, $4)`,
                [orderId, product_id, quantity, price]
            );
        }

        // Step 7: Clear the Cart
        await pool.query(`DELETE FROM cartitems WHERE cart_id = $1`, [cart_id]);
        await pool.query(`UPDATE carts SET total_amount = 0 WHERE cart_id = $1`, [cart_id]);

        await pool.query("COMMIT"); // Commit Transaction

        return {
            message: "Order created and stock updated successfully.",
            order: orderResult.rows[0]
        };
    } catch (error) {
        await pool.query("ROLLBACK"); // Rollback Transaction if Error Occurs
        console.error("Error creating order:", error);
        throw new Error("Error creating order.");
    }
};


import  pool  from "../config/database";

export const addProduct = async (
    category_id: number,
    name: string,
    description: string,
    price: number,
    stock: number
) => {
    const result = await pool.query(
        `INSERT INTO products (category_id, name, description, price, stock, created_at, updated_at)
         VALUES ($1, $2, $3, $4, $5, NOW(), NOW()) 
         RETURNING *`,
        [category_id, name, description, price, stock]
    );
    return result.rows[0];
};


export const getAllProducts = async () => {
    const result = await pool.query(`SELECT * FROM products ORDER BY created_at DESC`);
    return result.rows;
};


export const getProductById = async (product_id: number) => {
    const result = await pool.query(`SELECT * FROM products WHERE product_id = $1`, [product_id]);
    return result.rows[0] || null;
};

export const updateProduct = async (
    product_id: number,
    category_id?: number,
    name?: string,
    description?: string,
    price?: number,
    stock?: number
) => {
    const result = await pool.query(
        `UPDATE products 
         SET category_id = COALESCE($2, category_id),
             name = COALESCE($3, name),
             description = COALESCE($4, description),
             price = COALESCE($5, price),
             stock = COALESCE($6, stock),
             updated_at = NOW()
         WHERE product_id = $1
         RETURNING *`,
        [product_id, category_id, name, description, price, stock]
    );
    return result.rows[0] || null;
};

export const deleteProduct = async (product_id: number) => {
    const result = await pool.query(`DELETE FROM products WHERE product_id = $1 RETURNING *`, [product_id]);
    return result.rows[0] || null;
};



// Update return item status
// export const updateReturnItemStatus = async (return_item_id: number, status: string) => {
//     const result = await pool.query(
//         `UPDATE return_items SET status = $1, updated_at = NOW() WHERE return_item_id = $2 RETURNING *`,
//         [status, return_item_id]
//     );
//     return result.rows[0];
// };


// Delete a return request
// export const deleteReturnRequest = async (return_id: number) => {
//     await pool.query(`DELETE FROM returns WHERE return_id = $1`, [return_id]);
//     return { message: "Return request deleted successfully" };
// };

// // Add return items to a return request
// export const addReturnItems = async (return_id: number, items: ReturnItem[]) => {
//     const returnItems = [];

//     for (let item of items) {
//         const { product_id, quantity, reason, status } = item;
//         const result = await pool.query(
//             `INSERT INTO return_items (return_id, product_id, quantity, reason, status, created_at)
//              VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING *`,
//             [return_id, product_id, quantity, reason, status]
//         );
//         returnItems.push(result.rows[0]);
//     }

//     return returnItems;
// };


import pool from "../config/database";

export interface ReturnItem {
    return_item_id?: number;
    return_id: number;
    product_id: number;
    quantity: number;
    ordered_item_id: number;
    reason: string;
    status: string;
    created_at?: Date;
}

export interface Return {
    return_id?: number;
    user_id: number;
    total_returned_quantity: number;
    return_reason: string;
    status: string;
    order_id: number;
    created_at?: Date;
}


export const createReturnRequest = async (returnRequest: Return, returnItems: ReturnItem[]) => {
    try {
        const { user_id, return_reason, order_id } = returnRequest;

        // Step 1: Check if the order exists and belongs to the user
        const orderCheck = await pool.query(
            `SELECT * FROM orders WHERE order_id = $1 AND user_id = $2`,
            [order_id, user_id]
        );

        if (orderCheck.rowCount === 0) {
            throw new Error("Order not found or does not belong to this user.");
        }

        // Step 2: Check if the order status is "delivered"
        const orderStatus = orderCheck.rows[0].status;
        if (orderStatus !== 'Delivered') {
            throw new Error("Order must be delivered before a return request can be created.");
        }

        // Step 3: Create the return request in the "returns" table
        const result = await pool.query(
            `INSERT INTO returns (user_id, return_reason, status, order_id, created_at)
             VALUES ($1, $2, 'Pending', $3, NOW()) RETURNING *`,
            [user_id, return_reason, order_id]
        );

        const returnId = result.rows[0].return_id;

        // Step 4: Insert return items into the "return_item" table
        if (returnItems.length > 0) {
            for (let item of returnItems) {
                const { product_id, quantity, reason, ordered_item_id } = item;

                // Edge Case: Check if quantity is greater than 0 and reason is provided
                if (quantity <= 0) {
                    throw new Error("Returned quantity must be greater than zero.");
                }
                if (!reason) {
                    throw new Error("Return reason must be provided for each item.");
                }

                // Step 5: Check if the order item exists and if the returned quantity is valid
                const orderItemCheck = await pool.query(
                    `SELECT oi.product_id, oi.quantity AS ordered_quantity
                     FROM ordereditems oi
                     WHERE oi.ordered_item_id = $1 AND oi.order_id = $2`,
                    [ordered_item_id, order_id]
                );

                if (orderItemCheck.rowCount === 0) {
                    throw new Error(`Order item with ID ${ordered_item_id} does not exist in this order.`);
                }

                const orderedQuantity = orderItemCheck.rows[0].ordered_quantity;

                // Step 6: Ensure the returned quantity is less than or equal to the ordered quantity
                if (quantity > orderedQuantity) {
                    throw new Error(`Returned quantity cannot exceed the ordered quantity (${orderedQuantity}).`);
                }

                // Add the return item to the return_item table
                await pool.query(
                    `INSERT INTO returnitems (return_id, product_id, quantity, reason, ordered_item_id, created_at)
                     VALUES ($1, $2, $3, $4, $5, NOW())`,
                    [returnId, product_id, quantity, reason, ordered_item_id]
                );
            }
        } else {
            throw new Error("At least one return item must be provided.");
        }

        return {
            message: "Return request created successfully",
            returnId: returnId,
        };

    } catch (error) {
        console.error("Error creating return request:", error);
        throw new Error(`Failed to create return request: ${error}`);
    }
};




// Get all return requests (admin)
export const getAllReturns = async () => {
    const result = await pool.query(`SELECT * FROM returns ORDER BY created_at DESC`);
    return result.rows;
};

// Get return details by return ID
export const getReturnDetails = async (return_id: number) => {
    const result = await pool.query(
        `SELECT * FROM returnitems WHERE return_id = $1`,
        [return_id]
    );
    return result.rows;
};

// Update return request status (admin)
export const updateReturnStatus = async (return_id: number, status: string) => {
    try {
        // Step 1: Check if the return request exists
        const returnCheck = await pool.query(
            `SELECT * FROM returns WHERE return_id = $1`,
            [return_id]
        );

        if (returnCheck.rowCount === 0) {
            throw new Error("Return request not found.");
        }

        // Step 2: Update the return status in the returns table
        const updatedReturn = await pool.query(
            `UPDATE returns SET status = $1 WHERE return_id = $2 RETURNING *`,
            [status, return_id]
        );

        // Step 3: Update the status in the return_item table
        await pool.query(
            `UPDATE returnitems SET status = $1 WHERE return_id = $2`,
            [status, return_id]
        );

        // Step 4: If return is approved, update product stock & total returned quantity
        if (status === "Approved") {
            // Get all return items
            const returnItems = await pool.query(
                `SELECT product_id, quantity FROM returnitems WHERE return_id = $1`,
                [return_id]
            );

            let totalReturnedQuantity = 0;

            for (const item of returnItems.rows) {
                const { product_id, quantity } = item;

                totalReturnedQuantity += quantity; // Sum up total returned quantity

                // Update the stock in the products table
                await pool.query(
                    `UPDATE products SET stock = stock + $1 WHERE product_id = $2`,
                    [quantity, product_id]
                );
            }

            // Step 5: Update the total_returned_quantity in the returns table
            await pool.query(
                `UPDATE returns SET total_returned_quantity = $1 WHERE return_id = $2`,
                [totalReturnedQuantity, return_id]
            );
        }

        return updatedReturn.rows[0];
    } catch (error) {
        console.error("Error updating return status:", error);
        throw new Error(`Failed to update return status: ${error}`);
    }
};



// 

// Get return items for a specific return request
export const getReturnItems = async (return_id: number, user_id: number) => {
    try {
        const result = await pool.query(
            `SELECT ri.* 
             FROM returnitems ri
             JOIN returns r ON ri.return_id = r.return_id
             WHERE ri.return_id = $1 AND r.user_id = $2`,
            [return_id, user_id]
        );

        return result.rows;
    } catch (error) {
        console.error("Error fetching return items:", error);
        throw new Error("Failed to fetch return items");
    }
};


import  pool  from "../config/database";


export const getAllUsersService = async () => {
    try {
        const result = await pool.query("SELECT first_name, last_name, email, role FROM users");
        return result.rows;
    } catch (error) {
        console.error("Error fetching users:", error);
        throw new Error("Could not retrieve users");
    }
};

export const getUserByIdService = async (userId: number) => {
    try {
        const result = await pool.query(
            "SELECT first_name, last_name, dob FROM users WHERE user_id = $1",
            [userId]
        );

        if (result.rows.length === 0) {
            return null; // User not found
        }

        return result.rows[0];
    } catch (error) {
        console.error("Error fetching user by ID:", error);
        throw new Error("Could not retrieve user");
    }
};


export const updateUserService = async (userId: number, name?: string) => {
    try {
        const result = await pool.query(
            `UPDATE users 
             SET last_name = COALESCE($2, last_name) 
             WHERE user_id = $1 
             RETURNING last_name, email, role`,
            [userId, name]
        );

        return result.rows.length > 0 ? result.rows[0] : null;
    } catch (error) {
        console.error("Error updating user:", error);
        throw new Error("Could not update user");
    }
};


